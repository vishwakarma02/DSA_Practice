const randomArray = (length = 5, limit = 100) => {
    let array = [];
    for (let i = 0; i < length; i++) {
        array.push(Math.floor(Math.random() * limit));
    }
    return array;
}

const largestItemInArray = (arr = randomArray()) => {
    console.log(arr);
    let max = Number.MIN_VALUE; // MIN_VALUE = 5e-324
    arr.forEach(el => {
        if (el > max) {
            max = el;
        }
    });
    console.log(max);
    console.log(Math.max(...arr));
};

const secondLargestItemInArray = (arr = randomArray()) => {
    console.log(arr);
    let max = arr[0];
    let secondMax = Number.MIN_VALUE;
    arr.forEach(el => {
        if (el > max) {
            secondMax = max;
            max = el;
        }
        if (el < max && el > secondMax) {
            secondMax = el;
        }
    });
    console.log(secondMax);
}

const checkIfSortedArray = (arr = randomArray()) => {
    console.log(arr);
    for (let i = 1; i < arr.length; i++) {
        if (arr[i - 1] > arr[i]) {
            console.log('unsorted');
            return;
        }
    }
    console.log('sorted');
}

const removeDuplicates = (arr = randomArray(100)) => {
    arr = arr.sort((a, b) => a - b)
    console.log(arr);
    const test = new Set();
    arr.forEach(el => test.add(el));
    console.log(test);
}

const leftRotationByOne = (arr = randomArray()) => {
    console.log(arr);
    // const firstItem = arr[0];
    // for (let i = 1; i < arr.length; i++) {
    //     arr[i-1] = arr[i];
    // }
    // arr[arr.length - 1] = firstItem;
    const temp = arr.shift();
    arr.push(temp);
    console.log(arr);
}

const leftRotationByN = (arr = randomArray(20, 10), n = 18) => {
    console.log(arr);
    // for (let i=1; i <= n % arr.length; i++) {
    //     const temp = arr.shift();
    //     console.log(temp);
    //     arr.push(temp);
    // }

    let z = -1;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === 0) {
            z = i;
            break;
        }
    }
    for (let i = z, j = z + 1; j < arr.length; j++) {
        if (arr[j] !== 0) {
            const temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i = j;
        }
    }
    console.log(arr);
}

const maximumSubArray = (arr, n, k) => {
    let sum = 0;
    let longest = 0;
    let i = 0;
    for (let j = 0; j<n; j++) {
        sum += arr[j];
        while (sum > k) {
            sum -= arr[i];
            i++;
        }
        if (sum == k) {
            longest = Math.max(longest, Math.abs(j-i) + 1);
        }
    }

    console.log('longest', longest, i);
}

const printArray = (arr, i,j) => {
    const newArray = [];
    arr.forEach((element, index) => {
        if (index >= i && index <= j) {
            newArray.push(element);
        }
    });
    return newArray;
}

const twoSum = (arr, target) => {
    // const hashArr = [];
    // let result = 'No';
    // for (let i = 0; i < arr.length; i++) {
    //    hashArr[arr[i]] = arr[i];
    // }
    // for (let i = 0; i < arr.length; i++) {
    //     const remaining = target - arr[i];
    //     if (hashArr[remaining]) {
    //         result = 'yes';
    //         break;
    //     }
    // }
    // console.log(result);

    const bubbleSort = () => {
        for (let i = 1; i < arr.length; i++) {
            let j = i;
            while (j > 0 && arr[j] < arr[j - 1]) {
                [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];
            }
        }
    }
    bubbleSort();

    let i = 0;
    let j = arr.length - 1;

    while (i < j) {
        const temp = arr[i] + arr[j];
        if (temp === target) {
            console.log('sum: ', arr[i] + arr[j]);
            break;
        }
        if (temp < target) {
            i++;
            continue;
        }
        if (temp > target) {
            j--;
            continue;
        }
    }
}

// time limit exceeded :|
const twoSumWithIndices = (arr, target) => {
    const newArray = [];
    for (let i = 0; i < arr.length; i++) {
        newArray.push([arr[i], i]);
    }

    const sortedArray = newArray.sort((a, b) => a[0] - b[0]);
    console.log(sortedArray);

    let i = 0;
    let j = sortedArray.length - 1;
    while (i < j) {
        const sum = sortedArray[i][0] + sortedArray[j][0];
        if (sum == target) {
            console.log(sortedArray[i], sortedArray[j]);
            return [sortedArray[i][1], sortedArray[j][1]];
        }
        if (sum > target) {
            j--;
            continue;
        }
        if (sum < target) {
            i++;
            continue;
        }
    }
}


// largestItemInArray();
// secondLargestItemInArray();
// checkIfSortedArray();
// removeDuplicates();
// leftRotationByOne();
// leftRotationByN();
// maximumSubArray([10, 5, 2, 7, 1, 9], 6, 15);
maximumSubArray([-13, 0, 6, 15, 16, 2, 15, -12, 17, -16, 0, -3, 19, -3, 2, -9, -6], 17, 15);
// twoSum([2,6,5,8,11], 14);

// const testArr = [8099179,4935679,3289468,9001022,-5016325,-9501170,5085092,7723978,8119503,-927361,-5426918,-3612729,8285623,-965199,8421831,3423646,7582540,3540355,7966761,6102735,-4574909,-743532,7296760,5857430,7625096,5770194,6322928,4862515,-1608594,-4972736,9210496,-3781209,-6847980,-6258018,-2336403,6025440,-8952919,1337114,5798755,5943962,3723175,-836468,-7331429,-644663,-3893492,-9205625,6672122,-3173564,7084454,2908705,4498364,-5310000,7915161,-3188393,-5817048,7872390,-5104941,-4806605,-4141926,9456231,-3825619,-4108691,7400031,-1745039,-3424116,9059765,-4788523,7478441,-9626815,-1184527,-9177076,-4168240,8428965,85530,5178019,5793567,1873756,5633406,-1649126,-9795971,243784,-5881845,-7409780,-6938613,8225397,4982601,2278832,-6412027,-5684737,-2325232,399398,-2707429,-5758186,9620978,-3882847,7629026,2296836,-5784801,2966423,-8829536,3564254,8430433,-2086418,2920127,-9876509,1867092,-6162952,3164168,5830938,2183258,-4902523,-1669585,-3540596,-608099,4620470,3613085,-1528401,7499865,2038978,6872155,-6873857,-2487518,-3597224,-3956846,-8992140,4625111,8351553,7020723,6587086,5636750,-5267472,8552887,8556114,3640560,-4017633,3774404,3639240,8415413,-2292233,-4930911,4223585,2927466,894510,-2473423,2231293,7473486,-9278539,8975725,7587095,-7400235,-6204393,7660555,-5426934,1226333,2248993,-9871637,-8811501,8877780,-7648787,-5255697,-2215536,3862850,-8011784,8741404,7438090,-6973316,-5433684,391750,-5806293,7597033,6691618,-3887169,7058655,6062924,-343888,8900078,-5479283,-4364149,-1720341,-166845,-6235004,2378426,7831915,2924374,364035,1051783,2327457,-6067745,-7899990,2736155,-459567,-7572008,-8787536,-6275015,7632435,2004838,-1172210,-236565,-7967611,-6048739,7734896,1762981,3389826,540876,4062384,-2415721,-4133033,2055541,-5158025,6878411,-2525048,3366330,2231987,-3671643,-622305,-6563699,6251613,-2132646,3550002,-7635273,-4442421,190808,1089366,7129957,-259912,-939265,-5584039,4156823,-5171056,7152439,-6315926,5972958,2604273,-9222301,-6153082,2687168,7856280,2516435,-8005030,-8615572,9231253,-5874963,5161271,-6854560,-9030708,-2789534,-5568598,1211255,-6174871,9126460,-12980,8270815,1916268,3614981,1945604,1999104,-6883259,8321146,8672281,2237448,-1131067,-9707940,6880100,-2410124,-995804,6712587,6252060,-2965874,7826721,2016373,7829863,9787501,7722758,8166379,-5720647,5059870,5142784,6055291,2202533,3437976,-6835321,-3796795,5442461,3953309,7533590,-5881354,8539031,-9220944,-2329157,-9168489,6105128,3636864,3225352,2525560,-1314099,5154438,1302151,6915763,-7340947,-964910,7623971,8737441,-2029785,-9131008,-7907024,3878801,5562634,-4842094,-9658743,6938948,-1755539,-541474,9841868,4859907,-7597898,403932,7645402,-8573706,3667742,3601503,3136522,-8777529,-9252319,-768971,-9422908,-2102128,5243109,-4262257,8600258,5109260,-1617025,-2730048,-2897134,286504,8366710,2371699,3978257,9672997,4021631,4746823,-3326418,6113237,3394841,3801840,-7338462,8122822,-2075217,6825903,-4688694,7842301,6189820,-4304290,-7054916,-7065951,6361340,-6583759,-4473326,-3975110,5074087,-8150723,8687290,-318509,-512138,-389473,2866096,-1076441,-2570438,-4745221,7239649,-34757,9646476,5853437,9048318,-1167009,-6427908,2034774,-9366750,-9036286,-6451639,-9829786,-9860945,4673372,7362220,1640195,-9286328,-7590708,-2502770,-7716303,3875357,9323841,-6680014,9863169,-9155890,1269336,9371627,1081436,2155410,7899043,7316647,-5511330,-7256818,2674742,-1887539,-8850463,-6936623,4909742,4599380,-596805,-4037032,-656907,4298411,3679182,9783840,2419682,-1015515,6552919,1602311,6441794,2715359,8803818,5041238,-688071,-9011029,8417842,-5448065,7541315,-9744725,-5453474,-1179412,-6024585,5345639,-1961556,-8476700,-5204881,3329685,8214831,-5697806,-1148358,8749088,-2758628,-2393829,1179871,-9904413,9062897,-1980256,-7361469,129500,4483898,-6767207,-4544113,-8009687,5679876,-5840681,-3293256,-3959262,-644341,8891054,-3438751,816736,-9485872,-7897659,1909222,4035359,-9270650,-7296799,9038400,2250211,912437,-7236439,-2708059,9981402,6749290,6030007,409571,-8313218,2013358,-2425108,6220989,-6640667,1221866,3050426,-3012068,-2615751,7053178,-8179570,3661513,-3601594,879435,71070,1016685,3143145,9773172,4244307,3951375,-4570922,4615687,4115397,-8131945,-9965850,-3954391,2414504,-4814117,-8824107,5737388,6983359,1492445,-8912205,-8812755,7043117,6880120,4597064,-3396818,6014304,2246726,8919684,-6744094,-5168020,5242347,-4250855,-4804075,8736356,-1161968,-8905756,-4910869,8222628,-99548,-4257488,-5762921,7761160,-9520373,8391805,-5552328,7855977,6090849,-5736698,-8305620,-2344527,-2692624,-9990161,5597501,396569,4404227,-1249999,-7356857,7821184,2714618,-5161588,567870,-9574501,-3005750,-2959911,-7405604,5571510,5123965,4236230,7935686,-5755902,7487140,-5234178,348324,6661906,-6158822,988818,-1962717,-2825058,1246953,8120173,8937983,9187813,-4946588,-8911666,-6809744,724862,-8206555,7559094,7151413,5456906,6127328,151510,4398566,7083104,-3344579,-8195923,6268003,-4168075,-6901466,-9480074,2067596,-3165982,-6920299,3255539,-2813711,3054449,-9825492,5131291,-7799239,1089980,3371888,-8824366,-6380886,6827540,9665677,8417109,1689717,1091705,-5526992,-3829414,7768117,-8824592,-5335880,7603699,5089863,-443948,5446992,8730335,-4859786,-586796,4854824,-5902112,1394785,-8669306,-4707398,-6954782,3719950,6115723,4011002,2700748,-5622421,-6436743,-172576,-3900009,9910116,8861396,9052215,9366804,-7003702,926938,8020781,-1273910,8459261,-1141178,4159381,-8556275,1206495,488855,-3210118,-9264443,421573,6059284,-5793485,-683584,5212763,-2056595,-4339006,5222474,-3871506,5491726,4318465,-7687513,3656621,-3067637,-1269181,9551724,-5576731,-106844,1860474,-376124,3858179,2590783,-74463,-8606103,8222424,-8514093,-5387200,6134297,367938,-5487771,-8535145,1574902,-6294610,-3722838,-309248,-531952,8835853,-907007,6302391,-6904373,-9295036,6177079,-7508460,-1002426,2990393,-991404,4611276,3200518,4575297,5254255,-7377299,-3086604,2821917,-8675112,-6021509,9464305,-8835909,9864231,7287914,-1463280,6583142,5527870,-5462642,6502828,-9813274,-931132,-3087390,-3740702,-2944141,-8768069,-2942430,4625516,5447138,720733,-3102585,-9491679,1210932,-6402639,7249139,9504008,4312259,9472424,-8880866,7018795,6218341,-9540139,-4902347,-4522209,-4660883,-2758921,1652163,6394698,6355359,8395709,-8977431,3776027,-7492137,8267293,-458032,3398722,8099378,-3744050,9821116,2573782,2458256,-7375909,-5847086,-4442104,3059161,7429784,5799146,-9329586,3501550,2712886,8685364,-1891115,6043513,5990586,2466681,6437149,-156423]
// const target = 13034858;
// console.log(twoSumWithIndices(testArr, target));
